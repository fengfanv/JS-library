
//waterfall('父级id名','子集clas名');


// 瀑布流布局
function waterfall(parent,pin){
	console.log('调用布局调整程序！');
    var oParent=document.getElementById(parent);// 父级对象
    var aPin=getClassObj(oParent,pin);// 获取存储块框pin的数组aPin
    var iPinW=aPin[0].offsetWidth;// 一个块框pin的宽
    var num=Math.floor(document.documentElement.clientWidth/iPinW);// 每行中能容纳的pin个数【窗口宽度除以一个块框宽度】
    oParent.style.cssText='width:'+(iPinW+1)*num+'px;margin:0px auto;';
    var pinHArr=[];// 用于存储 每列中的所有块框相加的高度。
    for(var i=0;i<aPin.length;i++){// 遍历数组aPin的每个块框元素
        var pinH=aPin[i].offsetHeight;
        if(i < num){
            pinHArr[i]=pinH; // 第一行中的num个块框pin 先添加进数组pinHArr
        }else{
            var minH=Math.min.apply(null,pinHArr);// 数组pinHArr中的最小值minH
            var minHIndex=getminHIndex(pinHArr,minH);
            aPin[i].style.position='absolute';// 设置绝对位移
            aPin[i].style.top=(minH+8)+'px';
            aPin[i].style.left=aPin[minHIndex].offsetLeft+'px';
            // 数组 最小高元素的高 + 添加上的aPin[i]块框高
            pinHArr[minHIndex]+=aPin[i].offsetHeight;// 更新添加了块框后的列高
        }
    }
    oParent.style.height=(Math.max.apply(null,pinHArr)+15)+'px';
}
// 获取子集对象
function getClassObj(parent,className){
    var obj=parent.getElementsByTagName('*');// 获取 父级的所有子集
    var pinS=[];// 创建一个数组 用于收集子元素
    for (var i=0;i<obj.length;i++) {// 遍历子元素、判断类别、压入数组
        if (obj[i].className==className){
            pinS.push(obj[i]);
        }
    };
    return pinS;
}
// 获取最小高度
function getminHIndex(arr,minH){
    for(var i in arr){
        if(arr[i]==minH){
            return i;
        }
    }
}
// 瀑布流